[Contract]: AllocContract

[Interface]:
-() [sum]
	* Inputs:
	{
		_env: Env
		count: Integer
	}
	* Output: Integer
	* Instructions:
		$
			{ id: 0, instruction: instantiate_object, input: (List), assign: v1, scope: 0 }
			{ id: 12, instruction: instantiate_object, input: (Range, 0, count), assign: METHOD_CALL_EXPRESSION_7, scope: 0 }
			{ id: 6, instruction: evaluate, input: (v1.push, i), assign: METHOD_CALL_ARG_1_1, scope: 0 }
			{ id: 13, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_7.for_each, METHOD_CALL_ARG_1_1), scope: 0 }
			{ id: 14, instruction: assign, input: (0), assign: sum, scope: 0 }
			{ id: 17, instruction: assign, input: (v1), assign: ITERATOR_15, scope: 0 }
			{ id: 18, instruction: evaluate, input: (start, v1), assign: i, scope: 0 }
			{ id: 19, instruction: end_of_iteration_check, input: (i, ITERATOR_15), assign: CHECK_CONDITION_ASSIGNMENT_16, scope: 0 }
			{ id: 21, instruction: jump, input: (CHECK_CONDITION_ASSIGNMENT_16, 20), scope: 0 }
			{ id: 26, instruction: add, input: (sum, i), assign: sum, scope: 20 }
			{ id: 27, instruction: increment, input: (i), scope: 20 }
			{ id: 28, instruction: goto, input: (19), scope: 20 }
			{ id: 0, instruction: return, input: (sum), scope: 0 }
		$
:[Interface]