[Contract]: IncrementContract

[Interface]:
-() [increment]
	* Inputs:
	{
		env: Env
	}
	* Output: Integer
	* Instructions:
		$
			{ id: 11, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_8, scope: 0 }
			{ id: 12, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_8.instance), assign: METHOD_CALL_EXPRESSION_7, scope: 0 }
			{ id: 13, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_7.get, &, COUNTER), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
			{ id: 14, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.unwrap_or, 0), assign: count|||Integer, scope: 0 }
			{ id: 19, instruction: add, input: (count, 1), assign: count, scope: 0 }
			{ id: 32, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_29, scope: 0 }
			{ id: 33, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_29.instance), assign: METHOD_CALL_EXPRESSION_28, scope: 0 }
			{ id: 34, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_28.set, &, COUNTER, &, count), scope: 0 }
			{ id: 45, instruction: evaluate, input: (env.events), assign: METHOD_CALL_EXPRESSION_42, scope: 0 }
			{ id: 38, instruction: instantiate_object, input: (Tuple, COUNTER, "increment"), assign: METHOD_CALL_ARG_1_35, scope: 0 }
			{ id: 46, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_42.publish, METHOD_CALL_ARG_1_35, count), scope: 0 }
			{ id: 0, instruction: return, input: (count), scope: 0 }
		$
:[Interface]
[State]:
* [COUNTER]
	* Type: String
	* Initial Value: "COUNTER"
:[State]

