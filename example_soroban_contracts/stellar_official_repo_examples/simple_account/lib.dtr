[Contract]: SimpleAccount

[Interface]:
-() [init]
	* Inputs:
	{
		env: Env
		public_key: ByteStringSmall
	}
	* Instructions:
		$
			{ id: 10, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_7, scope: 0 }
			{ id: 11, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_7.instance), assign: METHOD_CALL_EXPRESSION_6, scope: 0 }
			{ id: 12, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_6.has, &, DataKey::Owner), assign: CONDITIONAL_JUMP_ASSIGNMENT_1, scope: 0 }
			{ id: 14, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_1, 13), scope: 0 }
			{ id: 15, instruction: exit_with_message, input: ("owner is already set"), scope: 13 }
			{ id: 29, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_26, scope: 0 }
			{ id: 30, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_26.instance), assign: METHOD_CALL_EXPRESSION_25, scope: 0 }
			{ id: 31, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_25.set, &, DataKey::Owner, &, public_key), scope: 0 }
		$
-() [__check_auth]
	* Inputs:
	{
		env: Env
		signature_payload: ByteStringSmall
		signature: ByteStringLarge
		_auth_context: List<Context>
	}
	* Instructions:
		$
			{ id: 10, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_7, scope: 0 }
			{ id: 11, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_7.instance), assign: METHOD_CALL_EXPRESSION_6, scope: 0 }
			{ id: 12, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_6.get, &, DataKey::Owner), assign: METHOD_CALL_EXPRESSION_1, scope: 0 }
			{ id: 13, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_1.unwrap), assign: public_key|||ByteStringSmall, scope: 0 }
			{ id: 31, instruction: evaluate, input: (env.crypto), assign: METHOD_CALL_EXPRESSION_28, scope: 0 }
			{ id: 23, instruction: evaluate, input: (&, signature_payload.into), assign: METHOD_CALL_ARG_2_18, scope: 0 }
			{ id: 32, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_28.ed25519_verify, &, public_key, METHOD_CALL_ARG_2_18, &, signature), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (DataKey_ENUM)
{
	Owner: ()
}

:[User Defined Types]