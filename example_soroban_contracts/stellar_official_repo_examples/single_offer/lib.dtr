[Contract]: SingleOffer

[Interface]:
-() [create]
	* Inputs:
	{
		e: Env
		seller: Address
		sell_token: Address
		buy_token: Address
		sell_price: Integer
		buy_price: Integer
	}
	* Instructions:
		$
			{ id: 9, instruction: evaluate, input: (e.storage), assign: METHOD_CALL_EXPRESSION_6, scope: 0 }
			{ id: 10, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_6.instance), assign: METHOD_CALL_EXPRESSION_5, scope: 0 }
			{ id: 11, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_5.has, &, DataKey::Offer), assign: CONDITIONAL_JUMP_ASSIGNMENT_0, scope: 0 }
			{ id: 13, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_0, 12), scope: 0 }
			{ id: 14, instruction: exit_with_message, input: ("offer is already created"), scope: 12 }
			{ id: 23, instruction: evaluate, input: (equal_to, buy_price, 0), assign: BINARY_EXPRESSION_LEFT_17, scope: 0 }
			{ id: 28, instruction: evaluate, input: (equal_to, sell_price, 0), assign: BINARY_EXPRESSION_RIGHT_18, scope: 0 }
			{ id: 29, instruction: or, input: (BINARY_EXPRESSION_LEFT_17, BINARY_EXPRESSION_RIGHT_18), assign: CONDITIONAL_JUMP_ASSIGNMENT_16, scope: 0 }
			{ id: 31, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_16, 30), scope: 0 }
			{ id: 32, instruction: exit_with_message, input: ("zero price is not allowed"), scope: 30 }
			{ id: 36, instruction: evaluate, input: (seller.require_auth), scope: 0 }
			{ id: 49, instruction: instantiate_object, input: (&, UDT, Offer, seller, sell_token, buy_token, sell_price, buy_price), assign: CALL_EXPRESSION_ARG_2_41, scope: 0 }
			{ id: 53, instruction: evaluate, input: (write_offer, &, e, CALL_EXPRESSION_ARG_2_41), scope: 0 }
		$
-() [trade]
	* Inputs:
	{
		e: Env
		buyer: Address
		buy_token_amount: BigInteger
		min_sell_token_amount: BigInteger
	}
	* Instructions:
		$
			{ id: 56, instruction: evaluate, input: (buyer.require_auth), scope: 0 }
			{ id: 63, instruction: evaluate, input: (load_offer, &, e), assign: offer, scope: 0 }
			{ id: 77, instruction: evaluate, input: (token::Client::new, &, e, &offer.sell_token), assign: sell_token_client, scope: 0 }
			{ id: 91, instruction: evaluate, input: (token::Client::new, &, e, &offer.buy_token), assign: buy_token_client, scope: 0 }
			{ id: 102, instruction: evaluate, input: (buy_token_amount.checked_mul, offer.sell_price), assign: METHOD_CALL_EXPRESSION_94, scope: 0 }
			{ id: 103, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_94.unwrap_optimized), assign: BINARY_EXPRESSION_LEFT_92, scope: 0 }
			{ id: 108, instruction: divide, input: (BINARY_EXPRESSION_LEFT_92, offer.buy_price), assign: sell_token_amount, scope: 0 }
			{ id: 114, instruction: evaluate, input: (less_than, sell_token_amount, min_sell_token_amount), assign: CONDITIONAL_JUMP_ASSIGNMENT_109, scope: 0 }
			{ id: 116, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_109, 115), scope: 0 }
			{ id: 117, instruction: exit_with_message, input: ("price is too low"), scope: 115 }
			{ id: 121, instruction: evaluate, input: (e.current_contract_address), assign: contract, scope: 0 }
			{ id: 136, instruction: evaluate, input: (buy_token_client.transfer, &, buyer, &, contract, &, buy_token_amount), scope: 0 }
			{ id: 151, instruction: evaluate, input: (sell_token_client.transfer, &, contract, &, buyer, &, sell_token_amount), scope: 0 }
			{ id: 169, instruction: evaluate, input: (buy_token_client.transfer, &, contract, &offer.seller, &, buy_token_amount), scope: 0 }
		$
-() [withdraw]
	* Inputs:
	{
		e: Env
		token: Address
		amount: BigInteger
	}
	* Instructions:
		$
			{ id: 176, instruction: evaluate, input: (load_offer, &, e), assign: offer, scope: 0 }
			{ id: 182, instruction: evaluate, input: (offer.seller.require_auth), scope: 0 }
			{ id: 211, instruction: evaluate, input: (token::Client::new, &, e, &, token), assign: METHOD_CALL_EXPRESSION_200, scope: 0 }
			{ id: 188, instruction: evaluate, input: (&, e.current_contract_address), assign: METHOD_CALL_ARG_1_183, scope: 0 }
			{ id: 212, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_200.transfer, METHOD_CALL_ARG_1_183, &offer.seller, &, amount), scope: 0 }
		$
-() [updt_price]
	* Inputs:
	{
		e: Env
		sell_price: Integer
		buy_price: Integer
	}
	* Instructions:
		$
			{ id: 220, instruction: evaluate, input: (equal_to, buy_price, 0), assign: BINARY_EXPRESSION_LEFT_214, scope: 0 }
			{ id: 225, instruction: evaluate, input: (equal_to, sell_price, 0), assign: BINARY_EXPRESSION_RIGHT_215, scope: 0 }
			{ id: 226, instruction: or, input: (BINARY_EXPRESSION_LEFT_214, BINARY_EXPRESSION_RIGHT_215), assign: CONDITIONAL_JUMP_ASSIGNMENT_213, scope: 0 }
			{ id: 228, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_213, 227), scope: 0 }
			{ id: 229, instruction: exit_with_message, input: ("zero price is not allowed"), scope: 227 }
			{ id: 237, instruction: evaluate, input: (load_offer, &, e), assign: offer, scope: 0 }
			{ id: 243, instruction: evaluate, input: (offer.seller.require_auth), scope: 0 }
			{ id: 251, instruction: assign, input: (sell_price), assign: offer.sell_price, scope: 0 }
			{ id: 259, instruction: assign, input: (buy_price), assign: offer.buy_price, scope: 0 }
			{ id: 270, instruction: evaluate, input: (write_offer, &, e, &, offer), scope: 0 }
		$
-() [get_offer]
	* Inputs:
	{
		e: Env
	}
	* Output: Offer
	* Instructions:
		$
			{ id: 277, instruction: evaluate, input: (load_offer, &, e), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (DataKey_ENUM)
{
	Offer: ()
}
* (Offer_STRUCT)
{
	seller: Address
	sell_token: Address
	buy_token: Address
	sell_price: Integer
	buy_price: Integer
}

:[User Defined Types]


[Helpers]:
-() [load_offer]
	* Inputs:
	{
		e: &Env
	}
	* Output: Offer
	* Instructions:
		$
			{ id: 9, instruction: evaluate, input: (e.storage), assign: METHOD_CALL_EXPRESSION_6, scope: 0 }
			{ id: 10, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_6.instance), assign: METHOD_CALL_EXPRESSION_5, scope: 0 }
			{ id: 11, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_5.get, &, DataKey::Offer), assign: METHOD_CALL_EXPRESSION_0, scope: 0 }
			{ id: 12, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_0.unwrap), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
-() [write_offer]
	* Inputs:
	{
		e: &Env
		offer: &Offer
	}
	* Instructions:
		$
			{ id: 10, instruction: evaluate, input: (e.storage), assign: METHOD_CALL_EXPRESSION_7, scope: 0 }
			{ id: 11, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_7.instance), assign: METHOD_CALL_EXPRESSION_6, scope: 0 }
			{ id: 12, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_6.set, &, DataKey::Offer, offer), scope: 0 }
		$

:[Helpers]

