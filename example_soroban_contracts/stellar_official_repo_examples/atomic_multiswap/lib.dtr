[Contract]: AtomicMultiSwapContract

[Interface]:
-() [multi_swap]
	* Inputs:
	{
		env: Env
		swap_contract: Address
		token_a: Address
		token_b: Address
		swaps_a: List<SwapSpec>
		swaps_b: List<SwapSpec>
	}
	* Instructions:
		$
			{ id: 11, instruction: evaluate, input: (atomic_swap::Client::new, &, env, &, swap_contract), assign: swap_client, scope: 0 }
			{ id: 16, instruction: evaluate, input: (swaps_a.iter), assign: ITERATOR_12, scope: 0 }
			{ id: 17, instruction: evaluate, input: (start, ITERATOR_12), assign: acc_a, scope: 0 }
			{ id: 18, instruction: end_of_iteration_check, input: (acc_a, ITERATOR_12), assign: CHECK_CONDITION_ASSIGNMENT_13, scope: 0 }
			{ id: 20, instruction: jump, input: (CHECK_CONDITION_ASSIGNMENT_13, 19), scope: 0 }
			{ id: 28, instruction: evaluate, input: (swaps_b.len), assign: RANGE_END_24, scope: 19 }
			{ id: 29, instruction: instantiate_object, input: (Range, 0, RANGE_END_24), assign: ITERATOR_21, scope: 19 }
			{ id: 30, instruction: evaluate, input: (start, ITERATOR_21), assign: i, scope: 19 }
			{ id: 31, instruction: end_of_iteration_check, input: (i, ITERATOR_21), assign: CHECK_CONDITION_ASSIGNMENT_22, scope: 19 }
			{ id: 33, instruction: jump, input: (CHECK_CONDITION_ASSIGNMENT_22, 32), scope: 19 }
			{ id: 39, instruction: evaluate, input: (swaps_b.get, i), assign: METHOD_CALL_EXPRESSION_34, scope: 32 }
			{ id: 40, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_34.unwrap), assign: acc_b, scope: 32 }
			{ id: 54, instruction: evaluate, input: (greater_than_or_equal_to, acc_a.amount, acc_b.min_recv), assign: BINARY_EXPRESSION_LEFT_42, scope: 32 }
			{ id: 65, instruction: evaluate, input: (less_than_or_equal_to, acc_a.min_recv, acc_b.amount), assign: BINARY_EXPRESSION_RIGHT_43, scope: 32 }
			{ id: 66, instruction: and, input: (BINARY_EXPRESSION_LEFT_42, BINARY_EXPRESSION_RIGHT_43), assign: CONDITIONAL_JUMP_ASSIGNMENT_41, scope: 32 }
			{ id: 68, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_41, 67), scope: 32 }
			{ id: 123, instruction: evaluate, input: (swap_client.try_swap, &acc_a.address, &acc_b.address, &, token_a, &, token_b, &acc_a.amount, &acc_a.min_recv, &acc_b.amount, &acc_b.min_recv), assign: METHOD_CALL_EXPRESSION_70, scope: 67 }
			{ id: 124, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_70.is_ok), assign: CONDITIONAL_JUMP_ASSIGNMENT_69, scope: 67 }
			{ id: 126, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_69, 125), scope: 67 }
			{ id: 131, instruction: evaluate, input: (swaps_b.remove, i), scope: 125 }
			{ id: 132, instruction: break, input: (), scope: 125 }
			{ id: 133, instruction: jump, input: (67), scope: 125 }
			{ id: 134, instruction: jump, input: (32), scope: 67 }
			{ id: 135, instruction: increment, input: (i, ITERATOR_21), scope: 32 }
			{ id: 136, instruction: goto, input: (31), scope: 32 }
			{ id: 137, instruction: increment, input: (acc_a, ITERATOR_12), scope: 19 }
			{ id: 138, instruction: goto, input: (18), scope: 19 }
		$
:[Interface]


[User Defined Types]:* (SwapSpec_STRUCT)
{
	address: Address
	amount: BigInteger
	min_recv: BigInteger
}

:[User Defined Types]


[NonTranslatable]:

mod atomic_swap {
	soroban_sdk::contractimport!(
		file = "../atomic_swap/target/wasm32-unknown-unknown/release/soroban_atomic_swap_contract.wasm"
	);
}

:[NonTranslatable]