[Contract]: IncrementContract

[Interface]:
-() [increment]
	* Inputs:
	{
		env: Env
	}
	* Output: Result<Integer, Error>
	* Instructions:
		$
			{ id: 11, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_8, scope: 0 }
			{ id: 12, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_8.instance), assign: METHOD_CALL_EXPRESSION_7, scope: 0 }
			{ id: 13, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_7.get, &, COUNTER), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
			{ id: 14, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.unwrap_or, 0), assign: count|||Integer, scope: 0 }
			{ id: 15, instruction: print, input: (&env, "count: {}", count), scope: 0 }
			{ id: 20, instruction: add, input: (count, 1), assign: count, scope: 0 }
			{ id: 26, instruction: evaluate, input: (less_than_or_equal_to, count, MAX), assign: CONDITIONAL_JUMP_ASSIGNMENT_21, scope: 0 }
			{ id: 28, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_21, 27), scope: 0 }
			{ id: 51, instruction: jump, input: (50), scope: 0 }
			{ id: 41, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_38, scope: 27 }
			{ id: 42, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_38.instance), assign: METHOD_CALL_EXPRESSION_37, scope: 27 }
			{ id: 43, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_37.set, &, COUNTER, &, count), scope: 27 }
			{ id: 48, instruction: evaluate, input: (Ok, count), assign: Thing_to_return, scope: 27 }
			{ id: 49, instruction: jump, input: (0), scope: 27 }
			{ id: 56, instruction: evaluate, input: (Err, Error::LimitReached), assign: Thing_to_return, scope: 50 }
			{ id: 57, instruction: jump, input: (0), scope: 50 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (Error_ENUM)
{
	LimitReached = 1
}

:[User Defined Types]
[State]:
* [COUNTER]
	* Type: String
	* Initial Value: "COUNTER"
* [MAX]
	* Type: Integer
	* Initial Value: 5
:[State]