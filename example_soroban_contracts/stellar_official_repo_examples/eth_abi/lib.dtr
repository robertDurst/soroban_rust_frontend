[Contract]: Contract

[Interface]:
-() [exec]
	* Inputs:
	{
		e: &Env
		input: String
	}
	* Output: Result<String, Error>
	* Instructions:
		$
			{ id: 4, instruction: evaluate, input: (repeat, 0, 128), assign: input_buf, scope: 0 }
			{ id: 15, instruction: evaluate, input: (input.len), assign: RANGE_END_11, scope: 0 }
			{ id: 16, instruction: instantiate_object, input: (Range, 0, RANGE_END_11), assign: INDEX_NAME_9, scope: 0 }
			{ id: 17, instruction: evaluate, input: (&, index, input_buf, INDEX_NAME_9), assign: input_slice, scope: 0 }
			{ id: 24, instruction: evaluate, input: (input.copy_into_slice, &, input_slice), scope: 0 }
			{ id: 36, instruction: evaluate, input: (Input::abi_decode, &, input_slice, false), assign: METHOD_CALL_EXPRESSION_27, scope: 0 }
			{ id: 37, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_27.map_err, Error::Decode), assign: input, scope: 0 }
			{ id: 52, instruction: add, input: (input.b, input.c), assign: r, scope: 0 }
			{ id: 53, instruction: instantiate_object, input: (UDT, Output, input.a, r), assign: output, scope: 0 }
			{ id: 57, instruction: evaluate, input: (output.abi_encode), assign: output_encoded, scope: 0 }
			{ id: 67, instruction: evaluate, input: (Bytes::from_slice, e, &, output_encoded), assign: CALL_EXPRESSION_ARG_1_58, scope: 0 }
			{ id: 70, instruction: evaluate, input: (Ok, CALL_EXPRESSION_ARG_1_58), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (Error_ENUM)
{
	Decode = 1
}

* (Solidity ABI Types)
{
	struct Input { bytes32 a ; uint256 b ; uint256 c ; } struct Output { bytes32 a ; uint256 r ; }
}

:[User Defined Types]