[Contract]: TtlContract

[Interface]:
-() [setup]
	* Inputs:
	{
		env: Env
	}
	* Instructions:
		$
			{ id: 12, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_9, scope: 0 }
			{ id: 13, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_9.persistent), assign: METHOD_CALL_EXPRESSION_8, scope: 0 }
			{ id: 14, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_8.set, &, DataKey::MyKey, &, 0), scope: 0 }
			{ id: 27, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_24, scope: 0 }
			{ id: 28, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_24.instance), assign: METHOD_CALL_EXPRESSION_23, scope: 0 }
			{ id: 29, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_23.set, &, DataKey::MyKey, &, 1), scope: 0 }
			{ id: 42, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_39, scope: 0 }
			{ id: 43, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_39.temporary), assign: METHOD_CALL_EXPRESSION_38, scope: 0 }
			{ id: 44, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_38.set, &, DataKey::MyKey, &, 2), scope: 0 }
		$
-() [extend_persistent]
	* Inputs:
	{
		env: Env
	}
	* Instructions:
		$
			{ id: 57, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_54, scope: 0 }
			{ id: 58, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_54.persistent), assign: METHOD_CALL_EXPRESSION_53, scope: 0 }
			{ id: 59, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_53.extend_ttl, &, DataKey::MyKey, 1000, 5000), scope: 0 }
		$
-() [extend_instance]
	* Inputs:
	{
		env: Env
	}
	* Instructions:
		$
			{ id: 68, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_65, scope: 0 }
			{ id: 69, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_65.instance), assign: METHOD_CALL_EXPRESSION_64, scope: 0 }
			{ id: 70, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_64.extend_ttl, 2000, 10000), scope: 0 }
		$
-() [extend_temporary]
	* Inputs:
	{
		env: Env
	}
	* Instructions:
		$
			{ id: 83, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_80, scope: 0 }
			{ id: 84, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_80.temporary), assign: METHOD_CALL_EXPRESSION_79, scope: 0 }
			{ id: 85, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_79.extend_ttl, &, DataKey::MyKey, 3000, 7000), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (DataKey_ENUM)
{
	MyKey: ()
}

:[User Defined Types]
