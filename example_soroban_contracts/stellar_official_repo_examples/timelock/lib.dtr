[Contract]: ClaimableBalanceContract

[Interface]:
-() [deposit]
	* Inputs:
	{
		env: Env
		from: Address
		token: Address
		amount: BigInteger
		claimants: List<Address>
		time_bound: TimeBound
	}
	* Instructions:
		$
			{ id: 5, instruction: evaluate, input: (claimants.len), assign: BINARY_EXPRESSION_LEFT_1, scope: 0 }
			{ id: 7, instruction: evaluate, input: (greater_than, BINARY_EXPRESSION_LEFT_1, 10), assign: CONDITIONAL_JUMP_ASSIGNMENT_0, scope: 0 }
			{ id: 9, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_0, 8), scope: 0 }
			{ id: 10, instruction: exit_with_message, input: ("too many claimants"), scope: 8 }
			{ id: 19, instruction: evaluate, input: (is_initialized, &, env), assign: CONDITIONAL_JUMP_ASSIGNMENT_12, scope: 0 }
			{ id: 21, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_12, 20), scope: 0 }
			{ id: 22, instruction: exit_with_message, input: ("contract has been already initialized"), scope: 20 }
			{ id: 26, instruction: evaluate, input: (from.require_auth), scope: 0 }
			{ id: 52, instruction: evaluate, input: (token::Client::new, &, env, &, token), assign: METHOD_CALL_EXPRESSION_41, scope: 0 }
			{ id: 36, instruction: evaluate, input: (&, env.current_contract_address), assign: METHOD_CALL_ARG_2_31, scope: 0 }
			{ id: 53, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_41.transfer, &, from, METHOD_CALL_ARG_2_31, &, amount), scope: 0 }
			{ id: 71, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_68, scope: 0 }
			{ id: 72, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_68.instance), assign: METHOD_CALL_EXPRESSION_67, scope: 0 }
			{ id: 65, instruction: instantiate_object, input: (&, UDT, ClaimableBalance, token, amount, time_bound, claimants), assign: METHOD_CALL_ARG_2_58, scope: 0 }
			{ id: 73, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_67.set, &, DataKey::Balance, METHOD_CALL_ARG_2_58), scope: 0 }
			{ id: 87, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_84, scope: 0 }
			{ id: 88, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_84.instance), assign: METHOD_CALL_EXPRESSION_83, scope: 0 }
			{ id: 81, instruction: instantiate_object, input: (&, Tuple), assign: METHOD_CALL_ARG_2_78, scope: 0 }
			{ id: 89, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_83.set, &, DataKey::Init, METHOD_CALL_ARG_2_78), scope: 0 }
		$
-() [claim]
	* Inputs:
	{
		env: Env
		claimant: Address
	}
	* Instructions:
		$
			{ id: 92, instruction: evaluate, input: (claimant.require_auth), scope: 0 }
			{ id: 102, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_99, scope: 0 }
			{ id: 103, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_99.instance), assign: METHOD_CALL_EXPRESSION_98, scope: 0 }
			{ id: 104, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_98.get, &, DataKey::Balance), assign: METHOD_CALL_EXPRESSION_93, scope: 0 }
			{ id: 105, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_93.unwrap), assign: claimable_balance|||ClaimableBalance, scope: 0 }
			{ id: 121, instruction: evaluate, input: (check_time_bound, &, env, &claimable_balance.time_bound), assign: UNARY_ARGUMENT_107, scope: 0 }
			{ id: 122, instruction: evaluate, input: (!, UNARY_ARGUMENT_107), assign: CONDITIONAL_JUMP_ASSIGNMENT_106, scope: 0 }
			{ id: 124, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_106, 123), scope: 0 }
			{ id: 125, instruction: exit_with_message, input: ("time predicate is not fulfilled"), scope: 123 }
			{ id: 141, instruction: evaluate, input: (claimants.contains, &, claimant), assign: UNARY_ARGUMENT_134, scope: 0 }
			{ id: 142, instruction: evaluate, input: (!, UNARY_ARGUMENT_134), assign: CONDITIONAL_JUMP_ASSIGNMENT_133, scope: 0 }
			{ id: 144, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_133, 143), scope: 0 }
			{ id: 145, instruction: exit_with_message, input: ("claimant is not allowed to claim this balance"), scope: 143 }
			{ id: 178, instruction: evaluate, input: (token::Client::new, &, env, &claimable_balance.token), assign: METHOD_CALL_EXPRESSION_164, scope: 0 }
			{ id: 152, instruction: evaluate, input: (&, env.current_contract_address), assign: METHOD_CALL_ARG_1_147, scope: 0 }
			{ id: 179, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_164.transfer, METHOD_CALL_ARG_1_147, &, claimant, &claimable_balance.amount), scope: 0 }
			{ id: 188, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_185, scope: 0 }
			{ id: 189, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_185.instance), assign: METHOD_CALL_EXPRESSION_184, scope: 0 }
			{ id: 190, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_184.remove, &, DataKey::Balance), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (DataKey_ENUM)
{
	Init: ()
	Balance: ()
}

* (TimeBoundKind_ENUM)
{
	Before: ()
	After: ()
}
* (TimeBound_STRUCT)
{
	kind: TimeBoundKind
	timestamp: Integer
}
* (ClaimableBalance_STRUCT)
{
	token: Address
	amount: BigInteger
	claimants: List<Address>
	time_bound: TimeBound
}

:[User Defined Types]


[Helpers]:
-() [check_time_bound]
	* Inputs:
	{
		env: &Env
		time_bound: &TimeBound
	}
	* Output: Boolean
	* Instructions:
		$
			{ id: 3, instruction: evaluate, input: (env.ledger), assign: METHOD_CALL_EXPRESSION_0, scope: 0 }
			{ id: 4, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_0.timestamp), assign: ledger_timestamp, scope: 0 }
			{ id: 8, instruction: assign, input: (time_bound, kind), assign: THING_TO_COMPARE_AGAINST_5, scope: 0 }
			{ id: 11, instruction: evaluate, input: (equal_to, time_bound.kind, TimeBoundKind::Before), assign: CONDITIONAL_JUMP_CHECK_10, scope: 0 }
			{ id: 24, instruction: evaluate, input: (equal_to, THING_TO_COMPARE_AGAINST_5, TimeBoundKind::After), assign: CONDITIONAL_JUMP_CHECK_23, scope: 0 }
			{ id: 13, instruction: jump, input: (CONDITIONAL_JUMP_CHECK_10, 12), scope: 0 }
			{ id: 26, instruction: jump, input: (CONDITIONAL_JUMP_CHECK_23, 25), scope: 0 }
			{ id: 21, instruction: evaluate, input: (less_than_or_equal_to, ledger_timestamp, time_bound.timestamp), assign: Thing_to_return, scope: 12 }
			{ id: 22, instruction: jump, input: (0), scope: 12 }
			{ id: 34, instruction: evaluate, input: (greater_than_or_equal_to, ledger_timestamp, time_bound.timestamp), assign: Thing_to_return, scope: 25 }
			{ id: 35, instruction: jump, input: (0), scope: 25 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
-() [is_initialized]
	* Inputs:
	{
		env: &Env
	}
	* Output: Boolean
	* Instructions:
		$
			{ id: 8, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_5, scope: 0 }
			{ id: 9, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_5.instance), assign: METHOD_CALL_EXPRESSION_4, scope: 0 }
			{ id: 10, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_4.has, &, DataKey::Init), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$

:[Helpers]