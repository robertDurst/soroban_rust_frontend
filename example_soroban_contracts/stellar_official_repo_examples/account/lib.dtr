[Contract]: AccountContract

[Interface]:
-() [init]
	* Inputs:
	{
		env: Env
		signers: List<ByteStringSmall>
	}
	* Instructions:
		$
			{ id: 5, instruction: evaluate, input: (signers.iter), assign: ITERATOR_1, scope: 0 }
			{ id: 6, instruction: evaluate, input: (start, ITERATOR_1), assign: signer, scope: 0 }
			{ id: 7, instruction: end_of_iteration_check, input: (signer, ITERATOR_1), assign: CHECK_CONDITION_ASSIGNMENT_2, scope: 0 }
			{ id: 9, instruction: jump, input: (CHECK_CONDITION_ASSIGNMENT_2, 8), scope: 0 }
			{ id: 27, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_24, scope: 8 }
			{ id: 28, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_24.instance), assign: METHOD_CALL_EXPRESSION_23, scope: 8 }
			{ id: 17, instruction: evaluate, input: (&, DataKey::Signer, signer), assign: METHOD_CALL_ARG_1_10, scope: 8 }
			{ id: 21, instruction: instantiate_object, input: (&, Tuple), assign: METHOD_CALL_ARG_2_18, scope: 8 }
			{ id: 29, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_23.set, METHOD_CALL_ARG_1_10, METHOD_CALL_ARG_2_18), scope: 8 }
			{ id: 30, instruction: increment, input: (signer, ITERATOR_1), scope: 8 }
			{ id: 31, instruction: goto, input: (7), scope: 8 }
			{ id: 46, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_43, scope: 0 }
			{ id: 47, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_43.instance), assign: METHOD_CALL_EXPRESSION_42, scope: 0 }
			{ id: 41, instruction: evaluate, input: (&, signers.len), assign: METHOD_CALL_ARG_2_36, scope: 0 }
			{ id: 48, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_42.set, &, DataKey::SignerCnt, METHOD_CALL_ARG_2_36), scope: 0 }
		$
-() [add_limit]
	* Inputs:
	{
		env: Env
		token: Address
		limit: BigInteger
	}
	* Instructions:
		$
			{ id: 52, instruction: evaluate, input: (env.current_contract_address), assign: METHOD_CALL_EXPRESSION_49, scope: 0 }
			{ id: 53, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_49.require_auth), scope: 0 }
			{ id: 70, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_67, scope: 0 }
			{ id: 71, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_67.instance), assign: METHOD_CALL_EXPRESSION_66, scope: 0 }
			{ id: 61, instruction: evaluate, input: (&, DataKey::SpendLimit, token), assign: METHOD_CALL_ARG_1_54, scope: 0 }
			{ id: 72, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_66.set, METHOD_CALL_ARG_1_54, &, limit), scope: 0 }
		$
:[Interface]


[User Defined Types]:* (AccSignature_STRUCT)
{
	public_key: ByteStringSmall
	signature: ByteStringLarge
}

* (DataKey_ENUM)
{
	SignerCnt: ()
	Signer: (ByteStringSmall)
	SpendLimit: (Address)
}

* (AccError_ENUM)
{
	NotEnoughSigners = 1
	NegativeAmount = 2
	BadSignatureOrder = 3
	UnknownSigner = 4
	InvalidContext = 5
}

:[User Defined Types]
[State]:
* [TRANSFER_FN]
	* Type: String
	* Initial Value: "transfer"
:[State]


[Helpers]:
-() [authenticate]
	* Inputs:
	{
		env: &Env
		signature_payload: &ByteStringSmall
		signatures: &List<AccSignature>
	}
	* Output: Result<(), AccError>
	* Instructions:
		$
			{ id: 8, instruction: evaluate, input: (signatures.len), assign: RANGE_END_4, scope: 0 }
			{ id: 9, instruction: instantiate_object, input: (Range, 0, RANGE_END_4), assign: ITERATOR_1, scope: 0 }
			{ id: 10, instruction: evaluate, input: (start, ITERATOR_1), assign: i, scope: 0 }
			{ id: 11, instruction: end_of_iteration_check, input: (i, ITERATOR_1), assign: CHECK_CONDITION_ASSIGNMENT_2, scope: 0 }
			{ id: 13, instruction: jump, input: (CHECK_CONDITION_ASSIGNMENT_2, 12), scope: 0 }
			{ id: 18, instruction: evaluate, input: (signatures.get_unchecked, i), assign: signature, scope: 12 }
			{ id: 24, instruction: evaluate, input: (greater_than, i, 0), assign: CONDITIONAL_JUMP_ASSIGNMENT_19, scope: 12 }
			{ id: 26, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_19, 25), scope: 12 }
			{ id: 32, instruction: subtract, input: (i, 1), assign: METHOD_CALL_ARG_1_27, scope: 25 }
			{ id: 35, instruction: evaluate, input: (signatures.get_unchecked, METHOD_CALL_ARG_1_27), assign: prev_signature, scope: 25 }
			{ id: 47, instruction: evaluate, input: (greater_than_or_equal_to, prev_signature.public_key, signature.public_key), assign: CONDITIONAL_JUMP_ASSIGNMENT_36, scope: 25 }
			{ id: 49, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_36, 48), scope: 25 }
			{ id: 55, instruction: evaluate, input: (Err, AccError::BadSignatureOrder), assign: RETURN_VALUE_LABEL_50, scope: 48 }
			{ id: 56, instruction: return, input: (RETURN_VALUE_LABEL_50), scope: 48 }
			{ id: 58, instruction: jump, input: (12), scope: 25 }
			{ id: 78, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_75, scope: 12 }
			{ id: 79, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_75.instance), assign: METHOD_CALL_EXPRESSION_74, scope: 12 }
			{ id: 70, instruction: evaluate, input: (signature.public_key.clone), assign: CALL_EXPRESSION_ARG_1_64, scope: 12 }
			{ id: 73, instruction: evaluate, input: (&, DataKey::Signer, CALL_EXPRESSION_ARG_1_64), assign: METHOD_CALL_ARG_1_61, scope: 12 }
			{ id: 80, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_74.has, METHOD_CALL_ARG_1_61), assign: UNARY_ARGUMENT_60, scope: 12 }
			{ id: 81, instruction: evaluate, input: (!, UNARY_ARGUMENT_60), assign: CONDITIONAL_JUMP_ASSIGNMENT_59, scope: 12 }
			{ id: 83, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_59, 82), scope: 12 }
			{ id: 89, instruction: evaluate, input: (Err, AccError::UnknownSigner), assign: RETURN_VALUE_LABEL_84, scope: 82 }
			{ id: 90, instruction: return, input: (RETURN_VALUE_LABEL_84), scope: 82 }
			{ id: 117, instruction: evaluate, input: (env.crypto), assign: METHOD_CALL_EXPRESSION_114, scope: 12 }
			{ id: 105, instruction: evaluate, input: (signature_payload.clone), assign: METHOD_CALL_EXPRESSION_102, scope: 12 }
			{ id: 106, instruction: evaluate, input: (&, METHOD_CALL_EXPRESSION_102.into), assign: METHOD_CALL_ARG_2_99, scope: 12 }
			{ id: 118, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_114.ed25519_verify, &signature.public_key, METHOD_CALL_ARG_2_99, &signature.signature), assign: Thing_to_return, scope: 12 }
			{ id: 119, instruction: increment, input: (i, ITERATOR_1), scope: 12 }
			{ id: 120, instruction: goto, input: (11), scope: 12 }
			{ id: 122, instruction: instantiate_object, input: (Tuple), assign: CALL_EXPRESSION_ARG_1_121, scope: 0 }
			{ id: 126, instruction: evaluate, input: (Ok, CALL_EXPRESSION_ARG_1_121), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
-() [verify_authorization_policy]
	* Inputs:
	{
		env: &Env
		context: &Context
		curr_contract: &Address
		all_signed: Boolean
		spend_left_per_token: &Dictionary<Address, BigInteger>
	}
	* Output: Result<(), AccError>
	* Instructions:
		$
			{ id: 1, instruction: assign, input: (context), assign: THING_TO_COMPARE_AGAINST_0, scope: 0 }
			{ id: 3, instruction: evaluate, input: (equal_to, context, Context::Contract(c)), assign: CONDITIONAL_JUMP_CHECK_2, scope: 0 }
			{ id: 37, instruction: evaluate, input: (equal_to, THING_TO_COMPARE_AGAINST_0, Context::CreateContractHostFn(_)), assign: CONDITIONAL_JUMP_CHECK_36, scope: 0 }
			{ id: 5, instruction: jump, input: (CONDITIONAL_JUMP_CHECK_2, 4), scope: 0 }
			{ id: 39, instruction: jump, input: (CONDITIONAL_JUMP_CHECK_36, 38), scope: 0 }
			{ id: 16, instruction: evaluate, input: (equal_to, &c.contract, curr_contract), assign: CONDITIONAL_JUMP_ASSIGNMENT_6, scope: 4 }
			{ id: 18, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_6, 17), scope: 4 }
			{ id: 22, instruction: evaluate, input: (!, all_signed), assign: CONDITIONAL_JUMP_ASSIGNMENT_19, scope: 17 }
			{ id: 24, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_19, 23), scope: 17 }
			{ id: 30, instruction: evaluate, input: (Err, AccError::NotEnoughSigners), assign: RETURN_VALUE_LABEL_25, scope: 23 }
			{ id: 31, instruction: return, input: (RETURN_VALUE_LABEL_25), scope: 23 }
			{ id: 33, instruction: jump, input: (4), scope: 17 }
			{ id: 35, instruction: jump, input: (0), scope: 4 }
			{ id: 45, instruction: evaluate, input: (Err, AccError::InvalidContext), assign: RETURN_VALUE_LABEL_40, scope: 38 }
			{ id: 46, instruction: return, input: (RETURN_VALUE_LABEL_40), scope: 38 }
			{ id: 58, instruction: evaluate, input: (not_equal_to, contract_context.fn_name, TRANSFER_FN), assign: BINARY_EXPRESSION_LEFT_49, scope: 0 }
			{ id: 71, instruction: evaluate, input: (Symbol::new, env, "approve"), assign: BINARY_EXPRESSION_RIGHT_60, scope: 0 }
			{ id: 72, instruction: evaluate, input: (not_equal_to, contract_context.fn_name, BINARY_EXPRESSION_RIGHT_60), assign: BINARY_EXPRESSION_RIGHT_50, scope: 0 }
			{ id: 73, instruction: and, input: (BINARY_EXPRESSION_LEFT_49, BINARY_EXPRESSION_RIGHT_50), assign: CONDITIONAL_JUMP_ASSIGNMENT_48, scope: 0 }
			{ id: 75, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_48, 74), scope: 0 }
			{ id: 78, instruction: instantiate_object, input: (Tuple), assign: CALL_EXPRESSION_ARG_1_77, scope: 74 }
			{ id: 82, instruction: evaluate, input: (Ok, CALL_EXPRESSION_ARG_1_77), assign: RETURN_VALUE_LABEL_76, scope: 74 }
			{ id: 83, instruction: return, input: (RETURN_VALUE_LABEL_76), scope: 74 }
			{ id: 93, instruction: evaluate, input: (contract_context.contract.clone), assign: METHOD_CALL_ARG_1_87, scope: 0 }
			{ id: 96, instruction: evaluate, input: (spend_left_per_token.get, METHOD_CALL_ARG_1_87), assign: INPUT_VALUE_NAME_FOR_LET_86, scope: 0 }
			{ id: 97, instruction: try_assign, input: (INPUT_VALUE_NAME_FOR_LET_86, Some(spend_left)), assign: CONDITIONAL_JUMP_ASSIGNMENT_85, scope: 0 }
			{ id: 99, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_85, 98), scope: 0 }
			{ id: 107, instruction: jump, input: (106), scope: 0 }
			{ id: 104, instruction: evaluate, input: (Some, spend_left), assign: spend_left|||Option<BigInteger>, scope: 98 }
			{ id: 105, instruction: jump, input: (0), scope: 98 }
			{ id: 127, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_124, scope: 106 }
			{ id: 128, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_124.instance), assign: METHOD_CALL_EXPRESSION_123, scope: 106 }
			{ id: 119, instruction: evaluate, input: (contract_context.contract.clone), assign: CALL_EXPRESSION_ARG_1_113, scope: 106 }
			{ id: 122, instruction: evaluate, input: (&, DataKey::SpendLimit, CALL_EXPRESSION_ARG_1_113), assign: METHOD_CALL_ARG_1_110, scope: 106 }
			{ id: 129, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_123.get, METHOD_CALL_ARG_1_110), assign: INPUT_VALUE_NAME_FOR_LET_109, scope: 106 }
			{ id: 130, instruction: try_assign, input: (INPUT_VALUE_NAME_FOR_LET_109, Some(limit_left)), assign: CONDITIONAL_JUMP_ASSIGNMENT_108, scope: 106 }
			{ id: 132, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_108, 131), scope: 106 }
			{ id: 140, instruction: jump, input: (139), scope: 106 }
			{ id: 137, instruction: evaluate, input: (Some, limit_left), assign: spend_left|||Option<BigInteger>, scope: 131 }
			{ id: 138, instruction: jump, input: (106), scope: 131 }
			{ id: 141, instruction: assign, input: (None), assign: spend_left|||Option<BigInteger>, scope: 139 }
			{ id: 142, instruction: jump, input: (106), scope: 139 }
			{ id: 143, instruction: jump, input: (0), scope: 106 }
			{ id: 147, instruction: try_assign, input: (spend_left, Some(spend_left)), assign: CONDITIONAL_JUMP_ASSIGNMENT_144, scope: 0 }
			{ id: 149, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_144, 148), scope: 0 }
			{ id: 162, instruction: evaluate, input: (contract_context.args.get, 2), assign: METHOD_CALL_EXPRESSION_154, scope: 148 }
			{ id: 163, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_154.unwrap), assign: METHOD_CALL_EXPRESSION_153, scope: 148 }
			{ id: 164, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_153.try_into_val, env), assign: METHOD_CALL_EXPRESSION_150, scope: 148 }
			{ id: 165, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_150.unwrap), assign: spent|||BigInteger, scope: 148 }
			{ id: 171, instruction: evaluate, input: (less_than, spent, 0), assign: CONDITIONAL_JUMP_ASSIGNMENT_166, scope: 148 }
			{ id: 173, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_166, 172), scope: 148 }
			{ id: 179, instruction: evaluate, input: (Err, AccError::NegativeAmount), assign: RETURN_VALUE_LABEL_174, scope: 172 }
			{ id: 180, instruction: return, input: (RETURN_VALUE_LABEL_174), scope: 172 }
			{ id: 187, instruction: evaluate, input: (!, all_signed), assign: BINARY_EXPRESSION_LEFT_183, scope: 148 }
			{ id: 192, instruction: evaluate, input: (greater_than, spent, spend_left), assign: BINARY_EXPRESSION_RIGHT_184, scope: 148 }
			{ id: 193, instruction: and, input: (BINARY_EXPRESSION_LEFT_183, BINARY_EXPRESSION_RIGHT_184), assign: CONDITIONAL_JUMP_ASSIGNMENT_182, scope: 148 }
			{ id: 195, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_182, 194), scope: 148 }
			{ id: 201, instruction: evaluate, input: (Err, AccError::NotEnoughSigners), assign: RETURN_VALUE_LABEL_196, scope: 194 }
			{ id: 202, instruction: return, input: (RETURN_VALUE_LABEL_196), scope: 194 }
			{ id: 210, instruction: evaluate, input: (contract_context.contract.clone), assign: METHOD_CALL_ARG_1_204, scope: 148 }
			{ id: 216, instruction: subtract, input: (spend_left, spent), assign: METHOD_CALL_ARG_2_211, scope: 148 }
			{ id: 219, instruction: evaluate, input: (spend_left_per_token.set, METHOD_CALL_ARG_1_204, METHOD_CALL_ARG_2_211), assign: Thing_to_return, scope: 148 }
			{ id: 220, instruction: jump, input: (0), scope: 148 }
			{ id: 222, instruction: instantiate_object, input: (Tuple), assign: CALL_EXPRESSION_ARG_1_221, scope: 0 }
			{ id: 226, instruction: evaluate, input: (Ok, CALL_EXPRESSION_ARG_1_221), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$

:[Helpers]


[Implementations]:

-->(CustomAccountInterface)<--
-() [__check_auth]
	* Inputs:
	{
		env: Env
		signature_payload: ByteStringSmall
		signatures: List<AccSignature>
		auth_context: List<Context>
	}
	* Output: Result<(), AccError>
	* Instructions:
		$
			{ id: 15, instruction: evaluate, input: (authenticate, &, env, &, signature_payload, &, signatures), scope: 0 }
			{ id: 25, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_22, scope: 0 }
			{ id: 26, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_22.instance), assign: METHOD_CALL_EXPRESSION_21, scope: 0 }
			{ id: 27, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_21.get, &, DataKey::SignerCnt), assign: METHOD_CALL_EXPRESSION_16, scope: 0 }
			{ id: 28, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_16.unwrap), assign: tot_signers|||Integer, scope: 0 }
			{ id: 34, instruction: evaluate, input: (signatures.len), assign: BINARY_EXPRESSION_RIGHT_30, scope: 0 }
			{ id: 35, instruction: evaluate, input: (equal_to, tot_signers, BINARY_EXPRESSION_RIGHT_30), assign: all_signed, scope: 0 }
			{ id: 38, instruction: evaluate, input: (env.current_contract_address), assign: curr_contract, scope: 0 }
			{ id: 45, instruction: evaluate, input: (Map::new, &, env), assign: spend_left_per_token, scope: 0 }
			{ id: 50, instruction: evaluate, input: (auth_context.iter), assign: ITERATOR_46, scope: 0 }
			{ id: 51, instruction: evaluate, input: (start, ITERATOR_46), assign: context, scope: 0 }
			{ id: 52, instruction: end_of_iteration_check, input: (context, ITERATOR_46), assign: CHECK_CONDITION_ASSIGNMENT_47, scope: 0 }
			{ id: 54, instruction: jump, input: (CHECK_CONDITION_ASSIGNMENT_47, 53), scope: 0 }
			{ id: 75, instruction: evaluate, input: (verify_authorization_policy, &, env, &, context, &, curr_contract, all_signed, &, spend_left_per_token), assign: Thing_to_return, scope: 53 }
			{ id: 76, instruction: increment, input: (context, ITERATOR_46), scope: 53 }
			{ id: 77, instruction: goto, input: (52), scope: 53 }
			{ id: 79, instruction: instantiate_object, input: (Tuple), assign: CALL_EXPRESSION_ARG_1_78, scope: 0 }
			{ id: 83, instruction: evaluate, input: (Ok, CALL_EXPRESSION_ARG_1_78), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$

:[Implementations]