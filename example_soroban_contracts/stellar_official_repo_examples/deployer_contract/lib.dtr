[Contract]: Contract

[Interface]:
-() [init]
	* Inputs:
	{
		env: Env
		value: Integer
	}
	* Instructions:
		$
			{ id: 12, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_9, scope: 0 }
			{ id: 13, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_9.instance), assign: METHOD_CALL_EXPRESSION_8, scope: 0 }
			{ id: 14, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_8.set, &, KEY, &, value), scope: 0 }
		$
-() [value]
	* Inputs:
	{
		env: Env
	}
	* Output: Integer
	* Instructions:
		$
			{ id: 24, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_21, scope: 0 }
			{ id: 25, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_21.instance), assign: METHOD_CALL_EXPRESSION_20, scope: 0 }
			{ id: 26, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_20.get, &, KEY), assign: METHOD_CALL_EXPRESSION_15, scope: 0 }
			{ id: 27, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_15.unwrap), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
:[Interface]
[State]:
* [KEY]
	* Type: String
	* Initial Value: "value"
:[State]

